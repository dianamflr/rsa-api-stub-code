# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.body_services import BodyServices  # noqa: F401,E501
from swagger_server.models.job_job_status_details import JobJobStatusDetails  # noqa: F401,E501
from swagger_server import util


class Job(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, services: List[BodyServices]=None, status: str=None, job_status_details: JobJobStatusDetails=None, operators: List[str]=None, service_areas: List[str]=None, aggregation_level: str=None, propagation_model_type: str=None, propagation_model_params: str=None, dataset_date: date=None, result_url: str=None):  # noqa: E501
        """Job - a model defined in Swagger

        :param id: The id of this Job.  # noqa: E501
        :type id: str
        :param services: The services of this Job.  # noqa: E501
        :type services: List[BodyServices]
        :param status: The status of this Job.  # noqa: E501
        :type status: str
        :param job_status_details: The job_status_details of this Job.  # noqa: E501
        :type job_status_details: JobJobStatusDetails
        :param operators: The operators of this Job.  # noqa: E501
        :type operators: List[str]
        :param service_areas: The service_areas of this Job.  # noqa: E501
        :type service_areas: List[str]
        :param aggregation_level: The aggregation_level of this Job.  # noqa: E501
        :type aggregation_level: str
        :param propagation_model_type: The propagation_model_type of this Job.  # noqa: E501
        :type propagation_model_type: str
        :param propagation_model_params: The propagation_model_params of this Job.  # noqa: E501
        :type propagation_model_params: str
        :param dataset_date: The dataset_date of this Job.  # noqa: E501
        :type dataset_date: date
        :param result_url: The result_url of this Job.  # noqa: E501
        :type result_url: str
        """
        self.swagger_types = {
            'id': str,
            'services': List[BodyServices],
            'status': str,
            'job_status_details': JobJobStatusDetails,
            'operators': List[str],
            'service_areas': List[str],
            'aggregation_level': str,
            'propagation_model_type': str,
            'propagation_model_params': str,
            'dataset_date': date,
            'result_url': str
        }

        self.attribute_map = {
            'id': 'id',
            'services': 'services',
            'status': 'status',
            'job_status_details': 'job_status_details',
            'operators': 'operators',
            'service_areas': 'service_areas',
            'aggregation_level': 'aggregationLevel',
            'propagation_model_type': 'propagation_model_type',
            'propagation_model_params': 'propagation_model_params',
            'dataset_date': 'dataset_date',
            'result_url': 'result_url'
        }
        self._id = id
        self._services = services
        self._status = status
        self._job_status_details = job_status_details
        self._operators = operators
        self._service_areas = service_areas
        self._aggregation_level = aggregation_level
        self._propagation_model_type = propagation_model_type
        self._propagation_model_params = propagation_model_params
        self._dataset_date = dataset_date
        self._result_url = result_url

    @classmethod
    def from_dict(cls, dikt) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The job of this Job.  # noqa: E501
        :rtype: Job
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Job.

        ID of the job  # noqa: E501

        :return: The id of this Job.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Job.

        ID of the job  # noqa: E501

        :param id: The id of this Job.
        :type id: str
        """

        self._id = id

    @property
    def services(self) -> List[BodyServices]:
        """Gets the services of this Job.


        :return: The services of this Job.
        :rtype: List[BodyServices]
        """
        return self._services

    @services.setter
    def services(self, services: List[BodyServices]):
        """Sets the services of this Job.


        :param services: The services of this Job.
        :type services: List[BodyServices]
        """

        self._services = services

    @property
    def status(self) -> str:
        """Gets the status of this Job.

        The current status of the job  # noqa: E501

        :return: The status of this Job.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Job.

        The current status of the job  # noqa: E501

        :param status: The status of this Job.
        :type status: str
        """
        allowed_values = ["pending", "inprogress", "completed", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def job_status_details(self) -> JobJobStatusDetails:
        """Gets the job_status_details of this Job.


        :return: The job_status_details of this Job.
        :rtype: JobJobStatusDetails
        """
        return self._job_status_details

    @job_status_details.setter
    def job_status_details(self, job_status_details: JobJobStatusDetails):
        """Sets the job_status_details of this Job.


        :param job_status_details: The job_status_details of this Job.
        :type job_status_details: JobJobStatusDetails
        """

        self._job_status_details = job_status_details

    @property
    def operators(self) -> List[str]:
        """Gets the operators of this Job.

        Operators of RSA job  # noqa: E501

        :return: The operators of this Job.
        :rtype: List[str]
        """
        return self._operators

    @operators.setter
    def operators(self, operators: List[str]):
        """Sets the operators of this Job.

        Operators of RSA job  # noqa: E501

        :param operators: The operators of this Job.
        :type operators: List[str]
        """

        self._operators = operators

    @property
    def service_areas(self) -> List[str]:
        """Gets the service_areas of this Job.

        Service areas of RSA job  # noqa: E501

        :return: The service_areas of this Job.
        :rtype: List[str]
        """
        return self._service_areas

    @service_areas.setter
    def service_areas(self, service_areas: List[str]):
        """Sets the service_areas of this Job.

        Service areas of RSA job  # noqa: E501

        :param service_areas: The service_areas of this Job.
        :type service_areas: List[str]
        """

        self._service_areas = service_areas

    @property
    def aggregation_level(self) -> str:
        """Gets the aggregation_level of this Job.

        Aggregation level of RSA job  # noqa: E501

        :return: The aggregation_level of this Job.
        :rtype: str
        """
        return self._aggregation_level

    @aggregation_level.setter
    def aggregation_level(self, aggregation_level: str):
        """Sets the aggregation_level of this Job.

        Aggregation level of RSA job  # noqa: E501

        :param aggregation_level: The aggregation_level of this Job.
        :type aggregation_level: str
        """

        self._aggregation_level = aggregation_level

    @property
    def propagation_model_type(self) -> str:
        """Gets the propagation_model_type of this Job.

        Propagation model of RSA job  # noqa: E501

        :return: The propagation_model_type of this Job.
        :rtype: str
        """
        return self._propagation_model_type

    @propagation_model_type.setter
    def propagation_model_type(self, propagation_model_type: str):
        """Sets the propagation_model_type of this Job.

        Propagation model of RSA job  # noqa: E501

        :param propagation_model_type: The propagation_model_type of this Job.
        :type propagation_model_type: str
        """

        self._propagation_model_type = propagation_model_type

    @property
    def propagation_model_params(self) -> str:
        """Gets the propagation_model_params of this Job.

        Parameters of propagation model  # noqa: E501

        :return: The propagation_model_params of this Job.
        :rtype: str
        """
        return self._propagation_model_params

    @propagation_model_params.setter
    def propagation_model_params(self, propagation_model_params: str):
        """Sets the propagation_model_params of this Job.

        Parameters of propagation model  # noqa: E501

        :param propagation_model_params: The propagation_model_params of this Job.
        :type propagation_model_params: str
        """

        self._propagation_model_params = propagation_model_params

    @property
    def dataset_date(self) -> date:
        """Gets the dataset_date of this Job.

        The date to be used to retrieve the datasets used for RSA analysis  # noqa: E501

        :return: The dataset_date of this Job.
        :rtype: date
        """
        return self._dataset_date

    @dataset_date.setter
    def dataset_date(self, dataset_date: date):
        """Sets the dataset_date of this Job.

        The date to be used to retrieve the datasets used for RSA analysis  # noqa: E501

        :param dataset_date: The dataset_date of this Job.
        :type dataset_date: date
        """

        self._dataset_date = dataset_date

    @property
    def result_url(self) -> str:
        """Gets the result_url of this Job.

        Signed S3 URL containing the result of the job - only present if  status is `completed`. The URL will only be valid for 30 minutes  from the time of calling this method. See the parent method for  details on result contents.  # noqa: E501

        :return: The result_url of this Job.
        :rtype: str
        """
        return self._result_url

    @result_url.setter
    def result_url(self, result_url: str):
        """Sets the result_url of this Job.

        Signed S3 URL containing the result of the job - only present if  status is `completed`. The URL will only be valid for 30 minutes  from the time of calling this method. See the parent method for  details on result contents.  # noqa: E501

        :param result_url: The result_url of this Job.
        :type result_url: str
        """

        self._result_url = result_url
