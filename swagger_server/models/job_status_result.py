# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.job_job_status_details import JobJobStatusDetails  # noqa: F401,E501
from swagger_server import util


class JobStatusResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, status: str=None, job_status_details: JobJobStatusDetails=None, result_url: str=None):  # noqa: E501
        """JobStatusResult - a model defined in Swagger

        :param id: The id of this JobStatusResult.  # noqa: E501
        :type id: str
        :param status: The status of this JobStatusResult.  # noqa: E501
        :type status: str
        :param job_status_details: The job_status_details of this JobStatusResult.  # noqa: E501
        :type job_status_details: JobJobStatusDetails
        :param result_url: The result_url of this JobStatusResult.  # noqa: E501
        :type result_url: str
        """
        self.swagger_types = {
            'id': str,
            'status': str,
            'job_status_details': JobJobStatusDetails,
            'result_url': str
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'job_status_details': 'job_status_details',
            'result_url': 'result_url'
        }
        self._id = id
        self._status = status
        self._job_status_details = job_status_details
        self._result_url = result_url

    @classmethod
    def from_dict(cls, dikt) -> 'JobStatusResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The jobStatusResult of this JobStatusResult.  # noqa: E501
        :rtype: JobStatusResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this JobStatusResult.

        Id of the job  # noqa: E501

        :return: The id of this JobStatusResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this JobStatusResult.

        Id of the job  # noqa: E501

        :param id: The id of this JobStatusResult.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self) -> str:
        """Gets the status of this JobStatusResult.

        Status of the job  # noqa: E501

        :return: The status of this JobStatusResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this JobStatusResult.

        Status of the job  # noqa: E501

        :param status: The status of this JobStatusResult.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def job_status_details(self) -> JobJobStatusDetails:
        """Gets the job_status_details of this JobStatusResult.


        :return: The job_status_details of this JobStatusResult.
        :rtype: JobJobStatusDetails
        """
        return self._job_status_details

    @job_status_details.setter
    def job_status_details(self, job_status_details: JobJobStatusDetails):
        """Sets the job_status_details of this JobStatusResult.


        :param job_status_details: The job_status_details of this JobStatusResult.
        :type job_status_details: JobJobStatusDetails
        """

        self._job_status_details = job_status_details

    @property
    def result_url(self) -> str:
        """Gets the result_url of this JobStatusResult.

        Signed S3 URL containing the result of the job - only present if  status is `completed`. The URL will only be valid for 30 minutes  from the time of calling this method. See the parent method for  details on result contents.  # noqa: E501

        :return: The result_url of this JobStatusResult.
        :rtype: str
        """
        return self._result_url

    @result_url.setter
    def result_url(self, result_url: str):
        """Sets the result_url of this JobStatusResult.

        Signed S3 URL containing the result of the job - only present if  status is `completed`. The URL will only be valid for 30 minutes  from the time of calling this method. See the parent method for  details on result contents.  # noqa: E501

        :param result_url: The result_url of this JobStatusResult.
        :type result_url: str
        """

        self._result_url = result_url
